[{"title":"翻墙神器（lantern）4K Youtube视频源秒开","date":"8888-08-18T10:08:08.000Z","path":"8888/08/18/Lantern专业版邀请码/","text":"lantern邀请码 2CR4W2 (翻墙速度最快的软件，程序员都用它)输入我的邀请码 2CR4W2 来获得三个月的蓝灯专业版！立即下载 https://github.com/getlantern/forum自从Lantern更新了LanternPro之后，现在在Youtube上看1080P的视频都很流畅(不仅仅是流畅是快得飞起，妈妈在也不用担心我卡成象拔蚌了)，如果大家喜欢用Lantern的话，可以试试。 【注意】：1.手机端使用UC浏览器可能会被替换成有广告的病毒版，看见（最新官方正版）这种字样 的一定不要手贱点下载。2.PC端百度搜索当心推送广告与钓鱼网站，直接去官网比什么都强。3.一些国产浏览器和某些安全管家会记录上传用户信息，有些会对蓝灯进行静默拦截如果蓝灯无法使用请尝试更换浏览器，使用国外杀毒软件 2017－2－10蓝灯3.6.3发布，增加稳定性度盘（PC+Android）:http://pan.baidu.com/s/1jIyUm4u 密码:3qss 备用PC：https://s3.amazonaws.com/lantern/lantern-installer-beta.exe备用安卓：https://s3.amazonaws.com/lantern/lantern-installer-beta.apk蓝灯官网：https://getlantern.org/#download-now 不定期更新，有疑问可留言. 邀请码 2CR4W2 买专业版输入的话咱俩各获赠1个月（买一年的）或3个月（48美刀两年） 以下是Github Lantern中国区代理版主评论的截图原论坛帖子链接点这里 用这个邀请码 2CR4W2的都是俊男美女 怎么都没人使用我的邀请码2CR4W2，我可能是假的程序猿 测速结果 lantern软件Github直达点击这里 如果验证翻墙是否成功点开以下图片","tags":[{"name":"Lantern","slug":"Lantern","permalink":"https://github.com/itgoyo/tags/Lantern/"}]},{"title":"Mac如何搭建Hexo博客(Win下同理)","date":"8888-08-08T00:08:08.000Z","path":"8888/08/08/mac如何搭建Hexo博客/","text":"1、Hexo搭建本项目github地址 喜欢的朋友，欢迎star ✨✨✨✨✨✨ https://github.com/itgoyo/itgoyo.github.io 环境一、环境安装 node.js（在node.js官网中下载安装）node.js官网 git（OS系统中直接安装x-code就可以了） hexo 1）打开OS系统终端 2）输入安装hexo的代码(此处安装时有可能会提示输入系统管理员密码) $ sudo npm install -g hexo二、hexo创建静态博客 新建blog文件夹 在终端进入该文件夹，初始化博客 $ hexo init 上述完成后，生成原始文件；blog文件夹就是博客的根目录 本地查看：启用本地服务命令(退出按ctrl+c) $ hexo s 将出现的地址输入浏览器，即可可查看到本地效果 三、github配置 注册github账号并登陆 获取本机的SSH口令 1）输入获取代码，回车直到出现图片所示图形为止 $ ssh-keygen 2）输入编译代码 $ vim ~/.ssh/id_rsa.pub3）出现SSH口令后，将红框部分复制，并在下方输入:q，随后按下回车可以退出该窗口 4）进入到github页面设置SSH口令 点击用户下拉菜单中的settings（step1) 点击左侧的SHH and GPG keys（step2) 在Title中输入口令名称（随意）（step3) 在key中贴上SSH口令（step4) 创建新的仓库 1）创建新的仓库（repOSitory） 点击用户左侧的+号菜单中的New repOSitory（step1) 在repOSitory name中输入二级域名，格式请严格遵照username.github.io（step2) ps：username填写github的登录用户名，否则上线的时候会报错 是否公开选项可以选取Public（step3) 勾选step4处，会自动生成一份可编辑的README.md文件（建议勾选）（step4) 点击create repOSitory生成仓库完毕（step5) 2）查看新建的仓库（repOSitory） 可以回到github个人首页点击右侧的仓库区 进入后在step1处选择并复制http地址，注意此时step2处应该是空的 四、发布博客 设置blog配置文件 1）打开blog文件夹下的_config.yml文件 2）找到最下方的type，输入git（注意冒号后面是带空格的） 3）repo行可能没有，需要自己输入，后面跟上github上仓库中复制的http地址（注意此时1、2两处应该是一样的username），不然上传时会报错 4）其他博客设置 title：博客名称 subtitle：博客副标题 description：博客描述 author：作者 language：语言（简体中文是zh-CN） 在终端上传博客 1）进入终端，输入git上传插件安装代码（安装时会提示输入github用户名及密码） $ npm install hexo-deployer-git –save2）安装完毕后，输入获取代码 $ hexo g3）最后输入上传代码 $ hexo d4）重新在github仓库查看上传文件，此时在step2中会有之前bolg中生成的文件 5）step3处就是你的博客地址 五、新建与更新博客 新建博客 1）终端bolg文件下，输入新建博客代码 $ hexo new &apos;filename&apos; 2）此时在bolg/source/_posts/下面会看到新建的博客 3）博客文件的后缀是.md文件，OS下推荐使用MOU编辑器mou下载地址 更新博客 1）完成编辑后，在终端上依次重复以下代码（此时必须先将编辑器关闭，否则会出现获取错误） $ hexo g $ hexo d 2）完成后便能刷新博客网页看到新更新的内容了","tags":[{"name":"Hexo","slug":"Hexo","permalink":"https://github.com/itgoyo/tags/Hexo/"}]},{"title":"Hexo加入评论功能","date":"8888-08-08T00:08:07.000Z","path":"8888/08/08/Hexo加入评论功能/","text":"Yilia主题（别的主题也是一样的操作）首先，我们要有一个多说的账号多说(2017-6-1废弃) 然后进入到后台把我们的网站填写进去 在theme/yilia/layout/_partial/post/目录下创建文件名叫：duoshuo.ejs把以下代码复制进去 123456789101112131415161718&lt;div class=\"duoshuo\"&gt; &lt;!-- 多说评论框 start --&gt; &lt;div class=\"ds-thread\" data-thread-key=\"&lt;%=key%&gt;\" data-title=\"&lt;%=title%&gt;\" data-url=\"&lt;%=url%&gt;\"&gt;&lt;/div&gt; &lt;!-- 多说评论框 end --&gt; &lt;!-- 多说公共JS代码 start (一个网页只需插入一次) --&gt; &lt;script type=\"text/javascript\"&gt; var duoshuoQuery = &#123;short_name:'&lt;%= config.duoshuo_shortname %&gt;'&#125;; (function() &#123; var ds = document.createElement('script'); ds.type = 'text/javascript';ds.async = true; ds.src = (document.location.protocol == 'https:' ? 'https:' : 'http:') + '//static.duoshuo.com/embed.js'; ds.charset = 'UTF-8'; (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(ds); &#125;)(); &lt;/script&gt; &lt;!-- 多说公共JS代码 end --&gt;&lt;/div&gt; 在hexo/_comfig.yml里边添加一下代码（名字换成自己的） 1duoshuo_shortname: xxxx(冒号后有空格) 最后在theme/yilia/_config.yml 里边添加以下代码（名字换成自己的） 12duoshuo: trueshort_name: xxxx #名字换你自己在多说后台的名字(冒号后有空格) 一共配置两处地方不然即便是看到评论功能，但是不会保留别人对你的评论 然后重新提交代码刷新即可看到评论功能 Yilia添加Disqus评论只需要在Yilia主题里边的_config.yml添加一句 disqus_shortname: 你的Disqus账户名称","tags":[{"name":"Hexo","slug":"Hexo","permalink":"https://github.com/itgoyo/tags/Hexo/"}]},{"title":"Hexo加入网易云音乐","date":"8888-08-08T00:08:06.000Z","path":"8888/08/08/Hexo加入网易云音乐/","text":"Yilia主题（我使用的是这个主题就用这个来讲）进入网易云音乐: 官网 推荐：自己注册账号，这样子可以创建自己喜欢的歌单，在里边收藏自己喜欢的歌曲 然后进入到自己的歌单 点击生成外链，获取到云音乐播放器代码 选择生成自己喜欢的样式，然后复制代码 最后打开（themes/yilia/layout/_partial/left-col.ejs）把复制好的网易云音乐放到第二行里边(当然这个是我的样式，我选择放在左边，你喜欢放在那里自己选择) 最后的效果图如下 邮箱 ：itgoyo@gmail.com Good Luck!","tags":[{"name":"Hexo","slug":"Hexo","permalink":"https://github.com/itgoyo/tags/Hexo/"}]},{"title":"Android7.0以上更新app出现崩溃","date":"2017-04-25T16:39:51.000Z","path":"2017/04/26/Android7-0以上更新app出现崩溃/","text":"今天在使用Android7.0手机升级app的时出现android.os.FileUriExposedException: file:///storage/emulated/0/xxx.xxx exposed beyond app through Intent.getData()，然后上StackOverFlow查了一下,找到了几种方法，推荐使用第二种，简单快捷 The app crashes when trying to open a file. It work below Android N, but on Android N it crashes. It only crashes when I try to open a file from the SD card, not from the system partition. 解决方法 ①： If your targetSdkVersion is 24 or higher, we have to use FileProvider class to give access to the particular file or folder to make them accessible for other apps. Steps to replace file:// uri with content:// uri: add a FileProvider tag in AndroidManifest.xml under tag. 12345678910111213141516&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;&lt;manifest xmlns:android=\"http://schemas.android.com/apk/res/android\" ... &lt;application ... &lt;provider android:name=\"android.support.v4.content.FileProvider\" android:authorities=\"$&#123;applicationId&#125;.provider\" android:exported=\"false\" android:grantUriPermissions=\"true\"&gt; &lt;meta-data android:name=\"android.support.FILE_PROVIDER_PATHS\" android:resource=\"@xml/provider_paths\"/&gt; &lt;/provider&gt; &lt;/application&gt;&lt;/manifest&gt; then create a provider_paths.xml file in xml folder under res folder. Folder may be needed to create if it doesn’t exist. The content of the file is shown below. It describes that we would like to share access to the External Storage at root folder (path=”.”) with the name external_files. 1234&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;&lt;paths xmlns:android=\"http://schemas.android.com/apk/res/android\"&gt; &lt;external-path name=\"external_files\" path=\".\"/&gt;&lt;/paths&gt; The final step is to change the line of code below in 1Uri photoURI = Uri.fromFile(createImageFile()); to 1Uri photoURI = FileProvider.getUriForFile(context, context.getApplicationContext().getPackageName() + \".provider\", createImageFile()); 解决方法 ②: Besides the solution using the FileProvider, there is another way to work around this. use this codes in your project application onCreate(); 123StrictMode.VmPolicy.Builder builder = new StrictMode.VmPolicy.Builder();StrictMode.setVmPolicy(builder.build());builder.detectFileUriExposure() May be wrong in the third line you can run like this: 12345StrictMode.VmPolicy.Builder builder = new StrictMode.VmPolicy.Builder(); StrictMode.setVmPolicy(builder.build()); if (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.N) &#123; builder.detectFileUriExposure(); &#125; StackOverFlow:http://stackoverflow.com/questions/38200282/android-os-fileuriexposedexception-file-storage-emulated-0-test-txt-exposed","tags":[{"name":"Android","slug":"Android","permalink":"https://github.com/itgoyo/tags/Android/"}]},{"title":"Destiny","date":"2017-03-19T16:57:25.000Z","path":"2017/03/20/Destiny/","text":"晚上洗澡的时候，手机里突然跳出这个音乐就收藏起来了，歌曲的调调还是比较慷慨激昂的(^__^)","tags":[{"name":"music","slug":"music","permalink":"https://github.com/itgoyo/tags/music/"}]},{"title":"美图","date":"2017-03-19T14:51:38.000Z","path":"2017/03/19/美图/","text":"","tags":[{"name":"picture","slug":"picture","permalink":"https://github.com/itgoyo/tags/picture/"}]},{"title":"Hexo加入百度统计","date":"2017-01-15T04:07:01.000Z","path":"2017/01/15/Hexo加入百度统计/","text":"yilia主题为🌰编辑文件 themes/yilia/_config.yml ,添加一行配置，可以删除原来的google analytics 1baidu_tongji: true 新建 themes/yilia/layout/_partial/baidu_tongji.ejs 内容如下 12345&lt;% if (theme.baidu_tongji) &#123; %&gt;&lt;script type=\"text/javascript\"&gt;#申请的百度统计代码&lt;/script&gt;&lt;% &#125; %&gt; 编辑themes/yilia/layout/_partial/head.ejs 在 前添加 1&lt;%- partial(\"baidu_tongji\") %&gt; 重新生产部署站点即可。Light主题编辑文件 themes/yilia/_config.yml ,添加一行配置，可以删除原来的google analytics 1baidu_tongji: true` 新建 themes/light/layout/_partial/baidu_tongji.ejs 内容如下 12345&lt;% if (theme.baidu_tongji) &#123; %&gt;&lt;script type=\"text/javascript\"&gt;#申请的百度统计代码&lt;/script&gt;&lt;% &#125; %&gt; 编辑themes/Yilia/layout/_partial/head.ejs 在 前添加 1&lt;%- partial(\"baidu_tongji\") %&gt;` 重新生产部署站点即可。 邮箱 ：itgoyo@gamail.com Good Luck!","tags":[{"name":"Hexo","slug":"Hexo","permalink":"https://github.com/itgoyo/tags/Hexo/"}]},{"title":"Markdown学习手册","date":"2014-12-31T17:11:00.000Z","path":"2015/01/01/Markdown学习手册/","text":"Markdown学习手册一. 简单功能 功能 效果 Markdown代码 备注 粗体 粗体 **粗体** 两边加** 斜体 斜体 _斜体_ 两边加_ 中划线 中划线 ~~中划线~~ 两边加~~ 单行代码 Log.i(&quot;Hello World!&quot;) `Log.i(“Hello World!”)` 两边加` 插入图片 ![Image](https://raw.githubusercontent.com/CharonChui/Pictures/master/rss.png?raw=true) [] 中间为占位符,() 中间为图片链接 链接 Visit Github [Visit Github](http://www.github.com) [] 中间为显示文字,() 中间为链接 二. 其他功能1. 换行在需要换行的地方敲击两次空格和一个回车键即可，如: 12这是第一行(空格)(空格)(回车)这是第二行 Tip: 多条新行都会被视为一行 2. 标题Markdown 提供了六种规格的标题，分别对应 Html 标签中的&lt;h1&gt;-&lt;h6&gt;，通过添加不同数量的#字符可以实现不同大小的标题，如:1234# 最大的标题(相当于一个&lt;h1&gt;标签)## 次大的标题(相当于一个&lt;h2&gt;标签)...###### 最小的标题(相当于一个&lt;h6&gt;标签) Tip: # 越多，标题越小 或者利用 = （最高阶标题）和 - （第二阶标题），任何数量的 = 和 - 都可以有效果。例如：12345678910111213141516H1===H2---``` 效果为:H1===H2---##### 3. 列表 ###### 3.1 有序列表数字 + . + 空格即可，以下代码： 项目1 项目2 项目3 1234567效果为： 1. 项目1 2. 项目2 3. 项目3 ###### 3.2 无序列表 以 * 和空格开头即可，以下代码: 项目1 项目2 项目3 1234567效果为： * 项目1* 项目2* 项目3###### 3.3 子项目表示： 子项目缩进一个 tab 并加 * 和 空格表示，以下代码： 项目1 子项目1 子项目2 项目2 子项目112345678910效果为： * 项目1 * 子项目1 * 子项目2* 项目2 * 子项目1##### 4. 代码块以 \\`\\`\\` 和 \\`\\`\\` 包含，以下代码： &lt;pre&gt;&lt;code&gt; def hello(): print ‘Hello World!’12&lt;/code&gt;&lt;/pre&gt;效果为： def hello(): print ‘Hello World!’1234567GFM 扩展了 Markdown 的代码块功能，通过在上面第一个 \\`\\`\\` 后添加语言名称，使不同语言展现不同的代码高亮风格，以下代码: &lt;pre&gt;&lt;code&gt;```javapublic static void main(String[] args)&#123; System.out.println(&quot;Hello World!&quot;);&#125; 效果为：123public static void main(String[] args)&#123; System.out.println(\"Hello World!\");&#125; 以下代码： 12def hello(): print 'Hello World!' 效果为：12def hello(): print 'Hello World!' 5. 表格标准的 Markdown 中并不支持表格，但 GFM 可以，表头前空一行，以 --- 做为表头分隔，以 | 做为列分隔，以下代码：1234表头1|表头2---|---单元格1|单元格2单元格3|单元格4 效果为： 表头1 表头2 单元格1 单元格2 单元格3 单元格4 而且还可以通过在表头分隔符中添加 : 来决定单元格的对齐方向，以下代码：1234表头1|表头2|表头3:--|:--:|--:左1|中1|右1左2|中2|右2 效果为： 表头1 表头2 表头3 左1 中1 右1 左2 中2 右2 6. 特殊字符转义如果需要在正文里使用特殊字符的话，可以用 \\ 来转义 邮箱 ：itgoyo@gmail.com Good Luck!","tags":[{"name":"Android","slug":"Android","permalink":"https://github.com/itgoyo/tags/Android/"}]},{"title":"编程没有捷径：奇葩冒牌程序员的故事","date":"2009-02-23T14:49:50.000Z","path":"2009/02/23/编程没有捷径：奇葩冒牌程序员的故事/","text":"文章转载自:泡在网上的日子 在讲述这个故事之前，我有一句话要说：编程是一件特别难的事情！ 成为优秀的编程人员没有捷径，你要拥有高智商，要保持谦逊，还要不断的努力，犯错，在错误中成长，深刻理解你所学习的材料。 但是有些人就是一定要寻找捷径，而其中之一，就是使用欺诈的手段。 这篇文章讲述的就是我所遇到的一个冒牌程序员。 几年前，我认识了一个 30 多岁的人，我们姑且给他起名叫 Bryan 吧。 Bryan 想要成为一名程序员，在我认识他之前的一年时间里，他一直都在有一搭无一搭的学习 Ruby，他还参加了一个为期 12 周的编程训练营。此前他有着 12 年的工作经验，但是他一直都在从事贸易和商业方面的工作。作为一个乐于助人的人，我成为了他的编程学习导师，每周和他见两次面。 我帮助他完成他的 Web 应用，基本都是博客和 Todo 类应用，帮助他学习各种编程基本知识。虽然他参加过那个训练营，但是他对编程知识的了解还是少的可怜，让我有一些惊讶。我鼓励他系统的去学习 Ruby，他也承诺会按我说的去做，我送了他几本有关 Ruby 学习的书。我本来以为我是一个好的导师，但是结果却让我大跌眼镜。 危险信号 #1我在 GitHub 上关注了他，并且定期会查看他的 repo，给他提意见，有一天，我在查看他的 GitHub 账户的时候，突然发现了 5 个新的 repo，而且基本都已经完成了。每个 repo 都有 2-3 个commit，而且体积都非常大。我怀疑他复制了别人的应用代码，在问过他之后，他的回答是：“我在学习 5 个新的辅导项目，而且希望在 24 小时内完成它们。” 我又问他：“这些代码是你复制的，还是为了更好的理解而在学习之后自己手打上去的？”他的回答是：“这些代码都太简单了，所以我只是把它们复制到我的 repo 里，然后再进行 commit。这样用人企业就会以为这些项目是我自己做的！” 其实很多开发者都会复制别人的代码，尤其是新手。但是在复制代码之后，我们必须要仔细阅读，真正理解这些代码的意思和用法。虽然我们不鼓励复制别人的代码，但是这并不算什么太大的错误，只要你明确说明代码的来源就好。 于是我对他说，之后我会对他进行测试，看看他是否真的理解了这些代码。但是不知道为了什么，他一直坚持说自己不需要学习这些代码。他的举动让我感到很失望，如果他想要找到一份开发者的工作，就不应该逃避学习。企业想要看到的是，是你自己写的代码，而不是从别处抄来的代码。 危险信号 #2有一天 Bryan 在 Slack 上联系我，问我是否能帮他完成一个 Ruby 的练习。这是一个基本的 fizzbuzz 挑战，很多企业都会用这个测试来考察面试人员的能力。我完成了这个练习，并且给他写好了详细的说明，好让他能理解。而他的回应是：“太好了，我今晚就把这个提交上去。”我回复说：“等等！这个是面试企业给你发来的面试测试吗？”而他立刻从 Slack 上下线了。 接下来的几天他都没有联系我。几天之后，我又一次在 Slack 上看到了他，他告诉我将要去参加一个初创企业的最终面试，职位是初级 Rails 开发者。我现在感觉有些愧疚，但是那时我竟然祝贺了他，并且祝他一切好运。而且我并没有提及几天前的那件事，我有点撒手不管的意思。 危险信号 #3那周晚些时候，我发现他的 GitHub 账户上又多了一个 repo，这是一个名为 capstone_test 的项目。它是一个非常完善的 CMS 应用，而且创建时间只用了 18 个小时。在没有帮助的情况下，他绝对不可能在 18 个小时的时间里就完成这样的应用。虽然满腹狐疑，但是作为他的导师，我还是给这个项目提了一些意见。 几天之后，他在 Slack 上联系到我，对我表示了感谢，他采纳了我的建议，并且把项目提交给了正在面试的企业。我问他是怎样在 18 个小时内完成这个项目的，他回答说自己使用了 AirPair 或其他帮助服务。我对他产生了极度的愤怒情绪，他先是让我帮他完成了第一个编程测试，然后又以 100 美元/小时的价格使用了 AirPair 的服务，让别人帮他做测试项目。 危险信号 #4我其实很少关注我的 GitHub 流量，也不太关注是谁复制了我的代码。但是有一次，我很巧合的发现我的 3 个项目都被同一个人复制了，我觉得有些奇怪，但是也没太往心里去。之后，我发现 Bryan 的 GitHub 上使用了我的 repo！而且并不是 fork 过去的，而是伪装成这些代码是他自己写的样子！虽然我的项目都是开源项目，谁都可以使用，但是我希望我的代码被正当的使用，而不是成为欺诈的工具。 Bryan 获得了工作！我在 LinkedIn 上发现 Bryan 已经成为了 Acme Company 的软件工程师。在入职之后，他不断的向我请教各种问题。我给他发送了一些链接，并且问他现在正在做什么项目。他告诉我他在做一个实时通知系统，他也承认自己入职以后对工作完全一窍不通。 我对他更失望了。他通过欺诈得到了一份初级开发者的工作。让我更生气的是，他只有 6 个月的系统学习经验，完全没有工作经验，但是他的年薪甚至比我还高 2 万美元。 我不想在帮助他了。于是我不再为他提供帮助，不回复他的 Slack 信息，我要让别人识破他的滥竽充数。如果当初我的导师发现我在这样骗人，他对我的惩罚会比我对 Bryan 的惩罚严重 10 倍。 Bryan 丢掉了工作一个月过去了，我们之间没有任何交流。我一直都在关注他的博客，发现他每周都会发一篇编程学习的文章。我觉得他可能真正开始学习了，但是我发现这些文章都是从 Stack Overflow 上复制来的，就连解释说明都是复制来的。这明显就是赤裸裸的抄袭！ 有一天 Bryan 在 Slack 上询问谁知道哪家公司在招开发者。我问他：“你刚找到的那份工作怎么了？”他的回答是，他觉得那家公司不适合他，他想要寻找其他机会。但是他不知道，事实上我认识他公司里的一个人，并且深入的了解了他在这家公司的情况。 我的朋友对我说，公司上下都觉得 Bryan 连一个初级开发者都算不上，他的各种解决办法都是从 StackOverflow 上复制来的。公司打算给他 3 周的考察时间，如果发现他的确能力不够，就解雇他。我告诉我的朋友，就连入职时的测试，都是 Bryan 骗我帮他做的，而且他还用了 AirPair 雇别人帮他写项目。我的朋友非常生气，立刻就给工程 VP 打了电话。 2 天之后，Bryan 被公司解雇，重回了自己从前的行业，做起了临时工的工作。 经验教训成为一名优秀的开发者，需要你不断努力，你要学习别人的项目，而不是偷窃别人的项目。 在错误中成长，让错误成为成长的催化剂。 决不能复制别人的代码，而且不说明原作者是谁。 决不能糊弄导师，企图蒙混过关。 抄袭会被人唾弃，并且毁了自己在行业内的名声。 总结丢了工作之后，Bryan 曾经联系我，让我帮他找一份新工作。我对他说，我无法和一个不值得我信任的人合作，从此以后我不会再为他提供任何帮助。在那之后，我们再没联系过，而 Bryan 至今依然在复制别人的代码，企图用这种方式找到一份开发者的工作。","tags":[{"name":"Code","slug":"Code","permalink":"https://github.com/itgoyo/tags/Code/"}]}]